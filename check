function RGBMatrix = toRGBmatrix(RGBMatrix, Image, Roipoly)
Roipoly = uint8(Roipoly);
R1 = Roipoly.*Image(:,:,1); %Red
G1 = Roipoly.*Image(:,:,2); %Green
B1 = Roipoly.*Image(:,:,3); %Blue

R1 = R1(R1 > 0);
R1 = R1';
G1 = G1(G1 > 0);
G1 = G1';
B1 = B1(B1 > 0);
B1 = B1';

newRGB = [R1; G1; B1];
RGBMatrix = [RGBMatrix newRGB];
end

function cw = clusterweight(data,p,meank,covk,currentk,maxk)
data = double(data);
sizeM = size(data);
sizeColumn = sizeM(1,2);
cw = zeros(1,sizeColumn);

for i = 1:sizeColumn
    sumscale = 0;
    for j = 1:maxk
    scale = scaledg(data,p, meank, covk,i,j);
    sumscale = sumscale + scale;
    end
    cw(1,i) = scaledg(data,p, meank, covk,i,currentk)/sumscale;
end

end

function sg = scaledg(data,p, meank, covk, dataindex,k)
data = double(data);
temp = [data(1,dataindex)-meank(1,k) ; data(2,dataindex)-meank(2,k) ; data(3,dataindex)-meank(3,k)];
sg = p(1,k)*(1/(sqrt((2*pi).^3*det(covk(:,:,k)))))*exp(((-1)/2).*temp'*inv(covk(:,:,k))*temp);
end

function mean = newmean(data, cw)
data = double(data);
dataR = data(1,:);
dataG = data(2,:);
dataB = data(3,:);
meanR = sum(dataR*cw','all')/sum(cw,'all');
meanG = sum(dataG*cw','all')/sum(cw,'all');
meanB = sum(dataB*cw','all')/sum(cw,'all');
%sum(data'.*cw',2)
%meantest = sum(cw'.*data',2)/sum(cw,'all')
mean = [meanR; meanG; meanB];
end

function cov = newcov(data, cw, mean)
data = double(data);
sizeM = size(data);
sizeColumn = sizeM(1,2);
dataR = data(1,:);
dataG = data(2,:);
dataB = data(3,:);
meanR = mean(1,1)*ones(1,sizeColumn);
meanG = mean(2,1)*ones(1,sizeColumn);
meanB = mean(3,1)*ones(1,sizeColumn);
R = dataR - meanR;
G = dataG - meanG;
B = dataB - meanB;

RR=0;
RG=0;
RB=0;
GG=0;
GB=0;
BB=0;

for i= 1:sizeColumn
    RR = RR+cw(1,i)*R(1,i)*R(1,i);
    RG = RG+cw(1,i)*R(1,i)*G(1,i);
    RB = RB+cw(1,i)*R(1,i)*B(1,i);
    GG = GG+cw(1,i)*G(1,i)*G(1,i);
    GB = GB+cw(1,i)*G(1,i)*B(1,i);
    BB = BB+cw(1,i)*B(1,i)*B(1,i);
end

covRR = RR/sum(cw,'all');
covRG = RG/sum(cw,'all');
covRB = RB/sum(cw,'all');
covGG = GG/sum(cw,'all');
covGB = GB/sum(cw,'all');
covBB = BB/sum(cw,'all');

cov = [covRR covRG covRB; covRG covGG covGB; covRB covGB covBB];


end

function p = newp(data,cw)
data = double(data);
sizeM = size(data);
sizeColumn = sizeM(1,2);
p = sum(cw,'all')/sizeColumn;
end

function probM = probMatrix(testImage, covRGB, meanRGB, p1)
sizeM = size(testImage);
sizeRow = sizeM(1,1);
sizeColumn = sizeM(1,2);
probM = zeros(sizeRow,sizeColumn);
testImage = double(testImage);

for i = 1:sizeRow
    for j= 1:sizeColumn
        
    temp = [testImage(i,j,1)-meanRGB(1,1) ; testImage(i,j,2)-meanRGB(2,1) ; testImage(i,j,3)-meanRGB(3,1)];
    probM(i,j) = p1*(1/(sqrt((2*pi).^3*det(covRGB))))*exp(((-1)/2).*temp'*inv(covRGB)*temp);
    
    end
end
end

function runimage(matrix)
figure
mycolors = [0 0 0.5; 0 1 0; 1 0 0; 1 1 0 ; 1 0.5 0];
%mycolors = [0 0 0.5 ; 1 0.5 0];
imagesc(matrix)
colormap(mycolors)
colorbar
caxis([1*10.^(-7) 5*10.^(-7)])
end
